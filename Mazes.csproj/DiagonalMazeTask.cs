//лабринт "Диагональ"

namespace Mazes
{
	public static class DiagonalMazeTask
	{
        static void MoveDown(Robot robot, int down) //метод шагания вниз
        {
            int moveCount = 0;                   //обнуляется счётчик шагов вниз
            while (moveCount < down)             //делается расчитанное (или присвоенное) в главной функции количество шагов
            {
                robot.MoveTo(Direction.Down);    //шагает вниз на одну клетку
                moveCount++;                     //прибавляется к количеству шагов еще один
            }
        }

        static void MoveRight(Robot robot, int step)  //метод шагания вправо
        {
            int moveCount = 0;                        //обнуляется счётчик шагов вправо
            while (moveCount < step)                  //делается расчитанное (или присвоенное) в главной функции количество шагов
            {
                robot.MoveTo(Direction.Right);        //шагает вправо на одну клетку
                moveCount++;                          //прибавляется к количеству шагов еще один
            }
        }

        static void WideMaze(Robot robot, int width, int height, int step, int down, int count) //метод для широкого лабиринта
        {
            while (true)                   //бесконечный цикл
            {                      
                MoveRight(robot, step);    //вызывается метод шагания вправо
                count += 1;                //к количеству пройденных строчек прибавляется еще одна
                if (count < height - 2)    //если количество пройденных строчек меньше высоты без первой и последней строчки
                    MoveDown(robot, down); //вызывается метод шагания вниз
                else                       //иначе - выходит из цикла
                    break;
            }
        }

    static void HighMaze(Robot robot, int width, int height, int step, int down, int count) //метод для высокого лабиринта
        {
            while (true)                    //бесконечный цикл
            {
                MoveDown(robot, down);      //вызывается метод шагания вниз
                count += 1;                 //к количеству пройденных столбиков прибавляется еще одна
                if (count < width - 2)      //если количество пройденных столбиков меньше ширины без крайних правого и левого столбиков
                    MoveRight(robot, step); //вызывается метод шагания вправо
                else                        //иначе - выходит из цикла
                    break;
            }
        }

        public static void MoveOut(Robot robot, int width, int height)
		{
            int step;      //количество шагов вправо
            int down;      //количество шагов вниз
            int count = 0; //счётчик шагов

            if (width > height) //если ширина больше высоты
            {
                step = (width - 2 - 1) / (height - 2);            //расчёт количества шагов вправо: минус два и там, и там - вычитание клеток стенок - верхней, 
                                                                  //нижней, правой, левой, еще минус один - по одной клетке перекрывается следующей строчкой всегда
                                                                  //кроме последней строчки - эту одну клетку, которую ничто не перекрывает, и убираем
                down = 1;                                         //количество шагов вниз на каждой итерации будет равно 1
                WideMaze(robot, width, height, step, down, count);//вызов метода для широкого лабиринта
            }
            else               //иначе (ширина меньше высоты (кажется, случая с равенством нет, но даже если и есть, пойдет сюда же)
            {
                step = 1;                                          //количество шагов вправо на каждой итерации будет равно 1
                down = (height - 2 - 1) / (width - 2);             //расчёт количества шагов вправо: минус два и там, и там - вычитание клеток стенок - верхней, 
                                                                   //нижней, правой, левой, еще минус один - по одной клетке перекрывается следующей строчкой всегда
                                                                   //кроме последней строчки - эту одну клетку, которую ничто не перекрывает, и убираем
                HighMaze(robot, width, height, step, down, count); //вызов метода для высокого лабиринта
            }
		}
	}
}