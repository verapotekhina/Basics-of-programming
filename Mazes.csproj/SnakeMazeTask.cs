//лабиринт "Змейка" 

namespace Mazes
{
    public static class SnakeMazeTask
    {
        static void MoveDown(Robot robot)     //метод шагания вниз
        {
            int moveCount = 0;                //обнуляется счётчик шагов вниз
            while (moveCount < 2)             //поскольку все стенки толщиной в одну клетку - на каждом повороте роботу нужно сделать 2 шага вниз 
            {
                robot.MoveTo(Direction.Down); //шагает вниз на одну клетку
                moveCount++;                  //прибавляется к количеству шагов еще один
            }
        }

        static void MoveRight(Robot robot, int width)  //метод шагания вправо
        {
            int moveCount = 0;                   //обнуляется счётчик шагов вправо
            while (moveCount < (width - 3))      //нужно сделать на три шага меньше, чем ширина лабиринта - минус три - это правая и левая стенки + клетка, на 
                                                 //которой стоит робот
            {
                robot.MoveTo(Direction.Right);   //шагает вправо на одну клетку
                moveCount++;                     //прибавляется к количеству шагов еще один
            }
        }

        static void MoveLeft(Robot robot, int width)
        {
            int moveCount = 0;               //обнуляется счётчик шагов влево
            while (moveCount < (width - 3))  //нужно сделать на три шага меньше, чем ширина лабиринта - минус три - это правая и левая стенки + клетка, на 
                                             //которой стоит робот
            {
                robot.MoveTo(Direction.Left);//шагает влево на одну клетку
                moveCount++;                 //прибавляется к количеству шагов еще один
            }
        }

        public static void MoveOut(Robot robot, int width, int height)
        {
            int count = 0;              //обнуляем счётчик количества пройденных строчек 
            while (count < height - 1)  //пока количество пройденных строчек меньше `высота минус единица` - так как судьба нижней границы лабиринта нас не волнует - 
            {                           //её мы сразу вычтем, а о верхней позаботимся позже
                MoveRight(robot, width);//вызывается метод шагания вправо
                MoveDown(robot);        //вызывается метод шагания вниз
                MoveLeft(robot, width); //вызывается метод шагания влево
                count = count + 4;      //к количеству пройденных строчек прибавляется 4 (три фактически пройденных + верхняя граница) - учитывается здесь, а  не вместе
                                        //с нижней, так как для каждого поворота будет своя верхняя граница (как один из вариантов, допускаю, что не самый простой)
                if (count < height - 1) //если количество пройденных строчек меньше, чем `высота минус единица`, то 
                    MoveDown(robot);    //вызывается метод шагания вниз
            }
        }
    }
}