using System;

/*Потехина Вера - 1 семинар, 5 задача - Расстояние до прямой
 * 
 * Посчитать расстояние от точки до прямой, заданной двумя разными точками.
 * 
 * на ввод подаются координаты трёх точек - определим, что 1 и 2 точки задают прямую
 * 
 * уравнение прямой: y = k*x + b
 * то есть подставляем координаты двух точек, лежащих на прямой и, решая систему с двумя неизвестными, находим k и b
 * далее ищем точку пересечения данной прямой и прямой, перпендикулярной данной и проходящей через заданную точку
 * условие перпендикулярности прямых - произведение угловых коэффициентов равно -1
 * находим расстояние между найденной и заданной точками
 */

namespace Distance_to_straight_line__seminar_1_
{
    class Program
    {
        static double Func(double x1, double y1, double x2, double y2, double x3, double y3)
        {
            double k1; //для первой прямой (которая задана точками)
            double b1;

            double k2; //для второй прямой (перпендикулярна первой)
            double b2;

            double x4; //точка пересечения двух этих прямых
            double y4;

            double r;

            if (x1 == x2)             //частный случай, если координата х1 равна координате х2, то прямая является вертикальной - расстояние от точки до прямой есть разность 
            {                         //координат х, взятая по модулю, так как мы не знаем, с какой стороны от прямой находится точка, а расстояние не может быть отрицательным
                r = Math.Abs(x3 - x1);
            }

            else if (y1 == y2)        //частный случай, если координата у1 равна координате у2, то прямая является горизонтальной - расстояние от точки до прямой есть разность 
            {                         //координат у, взятая по модулю, так как мы не знаем, выше или ниже от прямой находится точка, а расстояние не может быть отрицательным
                r = Math.Abs(y3 - y1);
            }

            else                      //для всех остальных случаев 
            {
                k1 = (y2 - y1) / (x2 - x1);   //вычисляется коэффициент наклона первой прямой
                b1 = y1 - k1 * x1;            //вычисляется свободный член в уравнении этой прямой

                k2 = -1 / k1;                 //вычисляется коэффициент наклона второй прямой (из свойства перпендикулярных прямых)
                b2 = y3 - k2 * x3;            //вычисляется свободный член в уравнении этой прямой

                x4 = (b1 - b2) / (k2 - k1);   //вычисляется координата х точки пересечения двух перпендикулярных прямых
                y4 = k1 * x4 + b1;            //и координата у 

                r = Math.Sqrt(Math.Pow((x4 - x3), 2) + Math.Pow((y4 - y3), 2)); //расстояние от точки до прямой  
            }
            return r;
        }

        static void Main(string[] args)
        {
            Console.Write("Enter the x1 coordinate: ");   //запрашивает коорднаты первой точки
            double x1 = double.Parse(Console.ReadLine()); 
            Console.Write("Enter the y1 coordinate: ");
            double y1 = double.Parse(Console.ReadLine());

            Console.Write("Enter the x2 coordinate: ");   //запрашивает координаты второй точки
            double x2 = double.Parse(Console.ReadLine());
            Console.Write("Enter the y2 coordinate: ");
            double y2 = double.Parse(Console.ReadLine());

            Console.Write("Enter the x3 coordinate: ");  //запрашивает координаты третьей точки
            double x3 = double.Parse(Console.ReadLine()); 
            Console.Write("Enter the y3 coordinate: ");
            double y3 = double.Parse(Console.ReadLine());

            Console.Write("Result: ");
            Console.WriteLine(Func(x1, y1, x2, y2, x3, y3)); //вызывает метод, вычисляющий расстояние до прямой и выводит результат
        }
    }
}
